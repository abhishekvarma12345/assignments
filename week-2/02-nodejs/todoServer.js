/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  
  const app = express();
  
  app.use(bodyParser.json());

  const todoList = [];

  app.get('/todos', (req, res) => { // list of todo items
    res.json(todoList);
  })

  app.get('/todos/:id', (req, res) => { // todo item with given id
    const id = req.params.id;
    let filteredTodo = todoList.filter(item => item.id == id);
    if (filteredTodo.length != 0){
      res.json(filteredTodo[0]);
    }
    else {
      res.status(404).send("404 not found");
    }
    
  });

  app.post('/todos', (req, res) => { // Create a new todo item
    let todoItem = req.body;
    todoItem = {id: Math.floor(Math.random() * 10000), ...todoItem}
    todoList.push(todoItem);
    res.status(201).json(todoItem);
  });


  app.put('/todos/:id', (req, res) => { // Update todo item with given id
    const todoIndex = todoList.findIndex(item => item.id === parseInt(req.params.id));
    if (todoIndex === -1) {
      res.send(404).send();
    } else {
      todoList[todoIndex].title = req.body.title;
      todoList[todoIndex].description = req.body.description;
      res.send(todoList[todoIndex]);
    }
  });

  app.delete('/todos/:id', (req, res) => { // delete a todo item with given id
    const todoIndex = todoList.findIndex(item => item.id === parseInt(req.params.id));
    if (todoIndex === -1) {
      res.send(404).send();
    } else {
      todoList.splice(todoIndex, 1);
      res.status(200).send();
    }
  });

  app.use((req, res, next) => { // middleware for other unkown routes
    res.status(404).send("Invalid route");
  });

  
  
  // app.listen(3000, () => {console.log("listening on http://localhost:3000");});
  module.exports = app;